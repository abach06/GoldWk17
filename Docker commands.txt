ORCHESTRATE
Initialize swarm mode and listen on a specific interface
Create a service from an image exposed on a specific port and deploy 3 instances
docker service create --replicas 3 -p 80:80 --name web nginx
docker swarm init --advertise-addr
10.1.0.2
Interior Gradient
Join an existing swarm as a manager node
docker swarm join --token <manager-token>
10.1.0.2:2377
List the services running in a swarm
Join an existing swarm as a worker node
Scale a service
docker swarm join --token <worker-token>
10.1.0.2:2377
docker service scale web=5
List the nodes participating in a swarm
docker service ps web
docker node ls
docker service ls
List the tasks of a service
BUILD
Build an image from the Dockerfile in the current directory and tag the image
docker build -t myapp:1.0 .
List all images that are locally stored with the Docker engine
docker images
SHIP
docker pull alpine:3.4
Retag a local image with a new image name and tag
docker kill web
Create an overlay network and specify a subnet
-it connect the container to terminal --name web name the container
RUN
docker run
--rm remove container automatically after it exits
-p5000:80 expose port 5000 externally and map to port 80 -v ~/dev:/code create a host mapped volume inside the container
alpine:3.4 the image from which the container is instantiated /bin/sh the command to run inside the container
Stop a running container through SIGTERM
docker stop web
Stop a running container through SIGKILL
Delete an image from the local image store
docker rm -f $(docker ps -aq)
docker rmi alpine:3.4
docker push myrepo/myalpine:3.4
Create a new bash process inside the container and connect it to the terminal
docker exec -it web bash
Pull an image from a registry
List the networks
docker tag alpine:3.4 myrepo/myalpine:3.4 Log in to a registry (the Docker Hub by default)
List the running containers